# -*- coding: utf-8 -*-
"""1771078_정드림_얼굴_2차_코드.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_J8KWdXEio2dlV9LCUBYyGr4VLD32IPS
"""

from glob import glob
import imageio
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import KFold
from sklearn.decomposition import PCA
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.svm import SVC
from sklearn.preprocessing import MinMaxScaler,RobustScaler,MaxAbsScaler,StandardScaler
import matplotlib.pyplot as plt
from PIL import Image
import tensorflow as tf
from tensorflow.keras import layers

import os,sys
from google.colab import drive

drive.mount('/content/mnt')

!unzip /content/mnt/MyDrive/dataset/02_face_training.zip -d /content/mnt/MyDrive/dataset/face_training
!unzip /content/mnt/MyDrive/dataset/02_face_test.zip -d /content/mnt/MyDrive/dataset/face_test

trainpath='/content/mnt/MyDrive/dataset/face_training/*'
traindata=glob(trainpath)

imgheight=56
imgwidth=46

def readImages(data):
  images=[]
  for i in range(len(data)):
    img=cv2.imread(data[i])
    img=cv2.resize(img,(imgwidth,imgheight))
    img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    images.append(img)
  return images
trainingimages=[]
trainingimages=readImages(traindata)

images_arr = np.asarray(trainingimages)
images_arr = images_arr.astype('float32')
#images_arr=images_arr.reshape(-1,imgwidth,imgheight,1) ####
images_arr=images_arr/255
images_arr.shape

fig, axes = plt.subplots(3, 9, figsize=(15, 5), subplot_kw={'xticks':(), 'yticks':()})

for image, ax in zip(trainingimages, axes.ravel()):
    ax.imshow(image,cmap='gray')

plt.show()

import imgaug.augmenters as iaa
import imgaug.imgaug

seq = iaa.Sequential([
    #iaa.CropAndPad(percent=(-0.2,0.2),pad_mode="edge",keep_size=False),
    iaa.Add((-2.5, 0.5), per_channel=0.5),
    # blur images with a sigma of 0 to 1
    iaa.Affine(
        # scale images to 90-110% of their size, individually per axis
        scale={"x": (0.9, 1.1), "y": (0.9, 1.1)},
        # translate by -10 to +10 percent (per axis)
        translate_percent={"x": (-0.1, 0.1), "y": (-0.1, 0.1)},
        # rotate by -30 to +30 degrees
        rotate=(-15, 15),
        # use nearest neighbour or bilinear interpolation (fast)
    )
])

images_arr2=seq.augment_images(images_arr)

plt.figure(figsize=(15, 7))
plt.subplot(3, 9, 1)

for i in range(27):
    plt.subplot(3, 9, i+1)
    plt.title('aug %02d' % int(i+1))
    plt.imshow(images_arr2[i].squeeze(), cmap='gray')

label=[]
for i in range(1,351):
  for j in range(3):
      label.append(i)
print(label)

y_arr=np.array(label)
print(y_arr.shape)

path='/content/mnt/MyDrive/dataset/face_test/'
file_names=os.listdir(path)
for file_name in file_names:
  src=os.path.join(path,file_name)
  dst=file_name.zfill(7)
  dst=os.path.join(path,dst)
  os.rename(src,dst)

testpath='/content/mnt/MyDrive/dataset/face_test/*'
realdata=glob(testpath)
realdata.sort()
realimages=[]
realimages=readImages(realdata)

#https://sims-solve.tistory.com/19  파일이름 일괄변경

realimages_arr = np.asarray(realimages)
realimages_arr = realimages_arr.astype('float32')
realimages_arr = realimages_arr.reshape(-1,imgwidth,imgheight)
realimages_arr = realimages_arr/255

realimages_arr.shape

nsamples, nx, ny = realimages_arr.shape
d2_realimages_arr = realimages_arr.reshape((nsamples,nx*ny))
yy_train=d2_realimages_arr

clf=SVC(C=100,gamma=0.001,kernel='rbf')
aug1=seq.augment_images(images_arr)
XX_train_set=[images_arr,aug1]

for i in range(1):
  X=XX_train_set[0]
  kfold = KFold(n_splits=5,shuffle=True)
  for train_index, validate_index in kfold.split(X,y_arr):

    nsamples, nx, ny = X.shape
    XX_train = X.reshape((nsamples,nx*ny))


    X_train, X_val = XX_train[train_index], XX_train[validate_index]
    y_train, y_val = y_arr[train_index], y_arr[validate_index]

    X_train=MaxAbsScaler().fit_transform(X_train)

    n_components=120
    pca=PCA(n_components=n_components).fit(X_train)
    X_train_pca=pca.transform(X_train)
    X_val_pca=pca.transform(X_val)


    clf=clf.fit(X_train_pca,y_train)
    y_pred=clf.predict(X_val_pca)
    print(clf.score(X_val_pca,y_val))
  #print(classification_report(y_val,y_pred))

print(classification_report(y_val,y_pred))

X_real_pca=pca.transform(d2_realimages_arr)
real_pred=clf.predict(X_real_pca)
print(real_pred)

from google.colab import files
import pandas as pd
df=pd.DataFrame(real_pred)
df

df.to_csv('faceanswer.txt')
files.download('faceanswer.txt')

#https://subinium.github.io/MLwithPython-3-4/

'''knn=KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train_pca,y_train)

print("{:.2f}".format(knn.score(X_test_pca,y_test)))'''

#https://analyticsindiamag.com/a-beginners-guide-to-scikit-learns-mlpclassifier/
'''clf=MLPClassifier(hidden_layer_sizes=(512,),batch_size=16,learning_rate_init=0.001,
                  verbose=True, max_iter=80).fit(X_train_pca,y_train)'''