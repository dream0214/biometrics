# -*- coding: utf-8 -*-
"""지문인식제출2차.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hII9np3b0pH5vjxmqlGmnahtSyhu7CIT
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import cv2
import random
import imageio
from glob import glob
import numpy as np
from sklearn.utils import shuffle
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import KFold
from sklearn.metrics import recall_score,precision_score,f1_score 
import tensorflow as tf
import matplotlib.pyplot as plt
# %matplotlib inline
from PIL import Image
from matplotlib.pyplot import imread
import keras
from keras import layers
from keras.layers import Dense,Activation,Flatten,Conv2D,MaxPooling2D,Dropout
from keras.models import Model
from keras.models import Sequential
from keras import optimizers 
from keras.layers.normalization import BatchNormalization

data = glob('/content/sample_data/fingerprint/training/*')
images = []
imgsize=144
def readImages(data):
    for i in range(len(data)):
        img = cv2.imread(data[i])
        img = cv2.resize(img,(imgsize,imgsize))
        img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        images.append(img)
        
    return images

images = readImages(data)

testdata = glob('/content/sample_data/fingerprint/testing/*')
testdata.sort()
testimages = []
def readtestImages(testdata):
    for i in range(len(testdata)):
        img = cv2.imread(testdata[i])
        img = cv2.resize(img,(imgsize,imgsize))
        img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        testimages.append(img)
    return testimages
testimages = readtestImages(testdata)

print(testdata)

images_arr = np.asarray(images)
images_arr = images_arr.astype('float32')
images_arr=images_arr.reshape(-1,imgsize,imgsize,1)
images_arr=images_arr/255
images_arr.shape

testimages_arr = np.asarray(testimages)
testimages_arr = testimages_arr.astype('float32')
testimages_arr=testimages_arr.reshape(-1,imgsize,imgsize,1)
testimages_arr=testimages_arr/255
testimages_arr.shape

path='/content/sample_data/fingerprint/training'
label=[]
for i in os.listdir(path):
   i,ext=os.path.splitext(i)
   if ext==".bmp":
     label.append(i[0])
label_arr=np.array(label)
label_arr.shape

learning_rate=0.0001
batch_size=8
epochs=40
model = keras.Sequential([
  Conv2D(4, (3,3), padding='same', activation='relu',input_shape=(imgsize,imgsize,1)),
  MaxPooling2D(2),
  Dropout(0.2),

  Conv2D(8, (3,3), padding='same', activation='relu'),
  MaxPooling2D(2),
  Dropout(0.2),

  Flatten(),
  Dense(128, activation='relu'),
  #Dropout(0.2),
  Dense(9,activation=tf.nn.softmax)
])

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['acc',precision,recall,f1score]
)
model.summary()

stratifiedkfold = StratifiedKFold(n_splits=5,random_state=0,shuffle=False)

for train_index, validate_index in stratifiedkfold.split(images_arr,label_arr):
    x_train, x_val = images_arr[train_index], images_arr[validate_index]
    label_train, label_val = label_arr[train_index], label_arr[validate_index]
    label_train=tf.keras.utils.to_categorical(label_train,9)
    label_val=tf.keras.utils.to_categorical(label_val,9)
    history=model.fit(x_train, label_train, batch_size=batch_size, epochs=epochs,validation_data=(x_val,label_val))

val_acc=history.history['val_acc']
val_loss=history.history['val_loss']
val_prec=history.history['precision']
val_recall=history.history['recall']
val_f1score=history.history['f1score']

plt.figure(figsize=(40,8))

plt.subplot(1, 5, 1)
plt.plot(val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Accuracy')

plt.subplot(1, 5, 2)
plt.plot( val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Loss')

plt.subplot(1, 5, 3)
plt.plot( val_prec, label='Validation Precisioin')
plt.legend(loc='upper right')
plt.title('Precision')

plt.subplot(1, 5, 4)
plt.plot( val_recall, label='Validation Recall')
plt.legend(loc='upper right')
plt.title('Recall')

plt.subplot(1, 5, 5)
plt.plot( val_f1score, label='Validation F1score')
plt.legend(loc='upper right')
plt.title('F1score')


plt.show()

predictions=model.predict(testimages_arr)
correct_prediction=tf.argmax(predictions,1)
print(correct_prediction)